<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllItemsAreNotUnique" xml:space="preserve">
    <value>The sequence contains one or more duplicate elements.</value>
  </data>
  <data name="AllPropertiesChangedNotRaised" xml:space="preserve">
    <value>The PropertyChanged event was not raised for all properties.</value>
  </data>
  <data name="AllPropertiesChangedRaised" xml:space="preserve">
    <value>The PropertyChanged event was raised for all properties.</value>
  </data>
  <data name="CollectionChangedActionNotExpected" xml:space="preserve">
    <value>The expected collection change action was {0}, but the actual action is {1}.</value>
  </data>
  <data name="CollectionChangedItemCountUnexpected" xml:space="preserve">
    <value>The NotifyCollectionChangedEventArgs.{0} property was expected to have a count of {1}.</value>
  </data>
  <data name="CollectionChangedItemUnexpected" xml:space="preserve">
    <value>The expected item does not equal the actual item provided in the NotifyCollectionChangedEventArgs.{0} property.</value>
  </data>
  <data name="CollectionChangedMoreThanOnce" xml:space="preserve">
    <value>The CollectionChanged event was raised more than once.</value>
  </data>
  <data name="CollectionChangedNewIndexNotExpected" xml:space="preserve">
    <value>The expected new starting index was {0}, but the actual new starting index is {1}.</value>
  </data>
  <data name="CollectionChangedNotRaised" xml:space="preserve">
    <value>The CollectionChanged event was not raised.</value>
  </data>
  <data name="CollectionChangedNullItems" xml:space="preserve">
    <value>The NotifyCollectionChangedEventArgs.{0} property was not expected to be null.</value>
  </data>
  <data name="CollectionChangedOldIndexNotExpected" xml:space="preserve">
    <value>The expected old starting index was {0}, but the actual old starting index is {1}.</value>
  </data>
  <data name="CollectionChangedWithItems" xml:space="preserve">
    <value>The NotifyCollectionChangedEventArgs.{0} property was expected to be empty or null.</value>
  </data>
  <data name="CollectionCountUnexpected" xml:space="preserve">
    <value>The expected collection count was {0}, but that actual count is {1}.</value>
  </data>
  <data name="CollectionItemNotRemoved" xml:space="preserve">
    <value>The specified item was not removed from the collection.</value>
  </data>
  <data name="ExceptionNotThrown" xml:space="preserve">
    <value>An exception was expected, but not thrown.</value>
  </data>
  <data name="ExceptionOfTNotThrown" xml:space="preserve">
    <value>An exception of type {0} was expected, but not thrown.</value>
  </data>
  <data name="ExpressionMustReferToPropertyOfDeclaredType" xml:space="preserve">
    <value>The expression '{0}' must refer to a property declared by type {1}.</value>
  </data>
  <data name="ExpresssionMustReferToProperty" xml:space="preserve">
    <value>The expression '{0}' must refer to a property.</value>
  </data>
  <data name="NullParameterToAssert" xml:space="preserve">
    <value>The parameter '{0}' is invalid. The value cannot be null.</value>
  </data>
  <data name="PropertyChangedNotRaised" xml:space="preserve">
    <value>The PropertyChanged event was not raised for property '{0}'.</value>
  </data>
  <data name="PropertyChangedNotRaisedForExpectedProperties" xml:space="preserve">
    <value>The PropertyChanged event was not raised for the following properties: {0}.</value>
  </data>
  <data name="PropertyChangedRaised" xml:space="preserve">
    <value>The PropertyChanged event was raised for property '{0}'.</value>
  </data>
  <data name="PropertyChangedRaisedForUnexpectedProperties" xml:space="preserve">
    <value>The PropertyChanged event was raised, but not expected for the following properties: {0}.</value>
  </data>
  <data name="SequenceContains" xml:space="preserve">
    <value>The sequence contains the element '{0}'.</value>
  </data>
  <data name="SequenceDoesNotContain" xml:space="preserve">
    <value>The sequence does not contain the element '{0}'.</value>
  </data>
  <data name="SequenceIsNotSubsetOf" xml:space="preserve">
    <value>The actual sequence is not a subset of the expected superset sequence.</value>
  </data>
  <data name="SequenceIsSubsetOf" xml:space="preserve">
    <value>The actual sequence is a subset of the expected superset sequence.</value>
  </data>
  <data name="SequencesAreEqual" xml:space="preserve">
    <value>The actual sequence is the same as the expected sequence.</value>
  </data>
  <data name="SequencesAreEquivalent" xml:space="preserve">
    <value>The actual sequence is equivalent to the expected sequence.</value>
  </data>
  <data name="SequencesAreNotEqual" xml:space="preserve">
    <value>The actual sequence is not the same as the expected sequence.</value>
  </data>
  <data name="SequencesAreNotEquivalent" xml:space="preserve">
    <value>The actual sequence is not equivalent to the expected sequence.</value>
  </data>
  <data name="SomeItemsAreNull" xml:space="preserve">
    <value>The sequence contains one or more null elements.</value>
  </data>
  <data name="WrongException" xml:space="preserve">
    <value>The expected exception was {0}, but an exception of type {1} was thrown.</value>
  </data>
  <data name="WrongParameterName" xml:space="preserve">
    <value>The excepted parameter associated with the exception was '{0}', but '{1}' was supplied.</value>
  </data>
</root>